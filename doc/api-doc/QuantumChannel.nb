(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    155487,       5391]
NotebookOptionsPosition[    145782,       5087]
NotebookOutlinePosition[    150371,       5221]
CellTagsIndexPosition[    149183,       5188]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["QuantumChannel Documentation", "Chapter",
 CellChangeTimes->{{3.6333515346579514`*^9, 3.63335154627586*^9}, {
  3.633364320690548*^9, 3.63336432261762*^9}, {3.633781291117386*^9, 
  3.633781292159832*^9}, {3.633781364287074*^9, 3.633781398056273*^9}}],

Cell[CellGroupData[{

Cell["Preamble", "Section",
 CellChangeTimes->{{3.633351558518317*^9, 3.633351560041299*^9}, {
  3.6337812001050663`*^9, 3.633781202247016*^9}}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<QuantumChannel`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.633351696261045*^9, 3.633351701530016*^9}, {
  3.633781146956828*^9, 3.633781148275402*^9}, {3.633781294331254*^9, 
  3.633781296275483*^9}, {3.633781369011711*^9, 3.633781370275049*^9}, {
  3.633781401233733*^9, 3.633781403767733*^9}}],

Cell["\<\
The following packages are needed to run some code found in this \
documentation notebook.\
\>", "Text",
 CellChangeTimes->{{3.633781139005548*^9, 3.6337811426309013`*^9}}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<DocTools`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.633880510985729*^9, 3.6338805145229187`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Introduction and Overview", "Section",
 CellChangeTimes->{{3.633351563673402*^9, 3.633351567143589*^9}}],

Cell["\<\
QuantumChannel provides tools for storing, manipulating, and using quantum \
channels, as well as tools for converting between representations. Tests for \
properties such as complete positivity are included, and some common measures \
such as process fidelity. The dimensions of the input and output spaces do \
not necessarily have to match. Arbitrary bases can be used for basis \
dependent representations.\
\>", "Text",
 CellChangeTimes->{{3.6337959305984907`*^9, 3.633796216955276*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Quantum Channels", "Section",
 CellChangeTimes->{{3.63335202563237*^9, 3.6333520385490847`*^9}, {
  3.633441643373975*^9, 3.633441643471745*^9}, {3.633795856617426*^9, 
  3.633795859078514*^9}, {3.633880663540921*^9, 3.633880663641457*^9}}],

Cell[TextData[{
 StyleBox["Quantum Channel Representation",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 StyleBox["\n", "Input"],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" is the ",
  FontColor->GrayLevel[0]],
 StyleBox["Head", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" used to internally represent quantum channels. A valid quantum \
channel will be stored as\n",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["obj", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",{ChannelRep\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["rep", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",InputDim\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["dIn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",OutputDim\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["dOut", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",Basis\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["basis", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" \nwhere\n\[Bullet]",
  FontColor->GrayLevel[0]],
 StyleBox[" ", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["obj", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is the matrix or appropriate object of the channel in the current \
representation,\n\[Bullet]",
  FontColor->GrayLevel[0]],
 StyleBox[" ", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["rep", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is the label which specifies the representation of \
\[OpenCurlyQuote]",
  FontColor->GrayLevel[0]],
 StyleBox["obj", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["\[CloseCurlyQuote], valid representations are ",
  FontColor->GrayLevel[0]],
 StyleBox["Unitary", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", ",
  FontColor->GrayLevel[0]],
 StyleBox["Super", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", ",
  FontColor->GrayLevel[0]],
 StyleBox["Choi", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", ",
  FontColor->GrayLevel[0]],
 StyleBox["Chi", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", ",
  FontColor->GrayLevel[0]],
 StyleBox["Kraus", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", ",
  FontColor->GrayLevel[0]],
 StyleBox["Stinespring", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", ",
  FontColor->GrayLevel[0]],
 StyleBox["SysEnv", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[",\n\[Bullet]",
  FontColor->GrayLevel[0]],
 StyleBox[" ", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["dI", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is the dimension of the input Hilbert space of the channel,\n\
\[Bullet]",
  FontColor->GrayLevel[0]],
 StyleBox[" ", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["dOut", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is the dimension of the output Hilbert space of the channel,\n\
\[Bullet]",
  FontColor->GrayLevel[0]],
 StyleBox[" ", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["basis", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" the the vectorization convention ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" used to represent the channel in the ",
  FontColor->GrayLevel[0]],
 StyleBox["Choi", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" and ",
  FontColor->GrayLevel[0]],
 StyleBox["Super", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representations.",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Quantum Channel Display Formatting",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["When displayed as output in the Mathematica GUI a ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is displayed as: ",
  FontColor->GrayLevel[0]],
 StyleBox["rep", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["obj", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",<params>]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Extracting Quantum Channel Data",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["\[Bullet] The physical matrix for the channel may be extracted by ",
  FontColor->GrayLevel[0]],
 StyleBox["First[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\[Bullet] The parameters may be extracted by ",
  FontColor->GrayLevel[0]],
 StyleBox["ChannelParameters[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" to return the list ",
  FontColor->GrayLevel[0]],
 StyleBox["{ChannelRep\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["rep", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",InputDim\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["dIn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",OutputDim\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["dOut", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",Basis\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["basis", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", or by ",
  FontColor->GrayLevel[0]],
 StyleBox["ChannelRep[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", ",
  FontColor->GrayLevel[0]],
 StyleBox["InputDim[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", ",
  FontColor->GrayLevel[0]],
 StyleBox["OutputDim[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" to return individual parameters.",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Changing Quantum Channel Representations",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["A ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" may have its representation transformed by: ",
  FontColor->GrayLevel[0]],
 StyleBox["newRep", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Quantum Channel Evolution",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["A ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" may be applied to a state to compute its evolution by ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["state", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["\nwhere ",
  FontColor->GrayLevel[0]],
 StyleBox["state", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is either a vector of dimension ",
  FontColor->GrayLevel[0]],
 StyleBox["dIn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[", a square matrix of dimension ",
  FontColor->GrayLevel[0]],
 StyleBox["{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["dIn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["dIn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}", "Input",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[", or a vectorized square matrix of dimension ",
  FontColor->GrayLevel[0]],
 StyleBox["{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["dIn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["*", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["dIn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",1}", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" or ",
  FontColor->GrayLevel[0]],
 StyleBox["{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["dIn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["*", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["dIn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}", "Input",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[". If the input is a vectorized matrix, it is assumed to be \
vectorized in the ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" corresponding to ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Constructing Quantum Channels",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["The construction of quantum channel is achieved by applying the \
appropriate representation function to an operator.\n",
  FontColor->GrayLevel[0]],
 StyleBox["Example:",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["Unitary[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["U", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["], Super[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["S", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["],  Kraus[{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["K1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["K2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",...,", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["Kn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[".\nChannels input this way will assume the default ",
  FontColor->GrayLevel[0]],
 StyleBox["Vec", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" and attempt to automatically calculate the input and output \
dimensions. Input and output dimensions, and basis may be specified manually \
using options.\n",
  FontColor->GrayLevel[0]],
 StyleBox["Example:",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["Super[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["S", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",Basis\[Rule]\[CloseCurlyDoubleQuote]Pauli\[CloseCurlyDoubleQuote]]\
", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", or ",
  FontColor->GrayLevel[0]],
 StyleBox["Choi[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["M", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[", InputDim\[Rule]4, Outp", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["utDim\[Rule]2]", "Input"],
 ".\n\n",
 StyleBox["Quantum Channel Operations",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\nThe following operations may be applied to quantum channels\n\[Bullet] ",
 StyleBox["Plus", "Input"],
 ": multiple channels with the same input and output dimensions may be added \
or subtracted, this is done by converting the channels to the ",
 StyleBox["Super", "Input"],
 " representation.\n\[Bullet] ",
 StyleBox["Times", "Input"],
 ":  channel may be multiplied by a scalar (numeric or symbolic). This \
applies to ",
 StyleBox["Unitary", "Input"],
 ", ",
 StyleBox["Choi", "Input"],
 " and ",
 StyleBox["Super", "Input"],
 " representations. All other representations are first converted to the ",
 StyleBox["Super", "Input"],
 " representation.\n\[Bullet] ",
 StyleBox["Dot", "Input"],
 ": multiple channels may be composed if the output dimension of one matches \
the input dimension of the following channel. This is done by converting the \
channels to the ",
 StyleBox["Super", "Input"],
 " representation.\n\[Bullet] ",
 StyleBox["Transpose, ConjugateTranspose, Conjugate, MatrixExp, MatrixPower, \
MatrixLog", "Input"],
 ": may be applied to a channel and the corresponding operation will be \
applied to the ",
 StyleBox["Super", "Input"],
 " representation of the channel.\n\[Bullet] ",
 StyleBox["KroneckerProduct, CircleTimes", "Input"],
 ": multiple channels may be tensor producted together. This is done via the ",
 StyleBox["Choi", "Input"],
 " matrix representation and automatically preserves the location of \
subsystems by applying the appropriate ",
 StyleBox["Reravel ", "Input"],
 "transformation.\n\[Bullet] ",
 StyleBox["Eigenvalues, Eigenvectors, Eigensystem", "Input"],
 ": Returns the Eigenvalues, Eigenvectors or Eigensystem for the ",
 StyleBox["Choi", "Input"],
 " matrix representation of a ",
 StyleBox["Quantu", "Input"],
 StyleBox["mChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Quantum Channel Functions",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\nThe following operations may be applied to quantum channels\n\[Bullet] ",
 StyleBox["Matr", "Input"],
 StyleBox["ixForm, MatrixPlot, ArrayPlot", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[": Display the matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["First[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" according to the applied function.\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["SparseArray, Normal, Simplify, FullSimplify, Refine, \
ComplexExpand, FunctionExpand, PowerExpand, ExpToTrig, TrigToExp, TrigExpand, \
TrigFactor, TrigReduce", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[": Apply the function to the data stored in ",
  FontColor->GrayLevel[0]],
 StyleBox["First[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" of the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[", including support for any optional arguments.",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{
  3.633875945145649*^9, {3.633876064568118*^9, 3.633876066814527*^9}, {
   3.63416300016823*^9, 3.6341631040327587`*^9}, {3.63416678391041*^9, 
   3.6341671836367683`*^9}, {3.634169142859272*^9, 3.6341693454728203`*^9}, {
   3.6341694372938547`*^9, 3.634169588839847*^9}, {3.634169709668614*^9, 
   3.634170132586179*^9}, {3.634170183117216*^9, 3.63417040007408*^9}, 
   3.634223104493618*^9, {3.6342231816247787`*^9, 3.634223182107005*^9}, 
   3.634223360144272*^9},
 CellTags->"QuantumChannel::usage"],

Cell[CellGroupData[{

Cell["Options", "Subsection",
 CellChangeTimes->{{3.633876118299673*^9, 3.6338761189954023`*^9}}],

Cell[BoxData[
 RowBox[{"DisplayOptions", "[", "QuantumChannel", "]"}]], "Input",
 CellChangeTimes->{{3.63387612178483*^9, 3.633876150511211*^9}}],

Cell[BoxData[GridBox[{
   {
    StyleBox["Option", "Text",
     FontWeight->Bold], 
    StyleBox[
     RowBox[{"Default", " ", "Value"}], "Text",
     FontWeight->Bold], 
    StyleBox["Description", "Text",
     FontWeight->Bold]},
   {"InputDim", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
       TagBox[
        StyleBox["InputDim", "Input",
         FontFamily->"Courier"],
        DisplayForm], " ", "is", " ", "the", " ", "input", " ", "dimension", 
       " ", "option", " ", "for", " ", 
       RowBox[{
        TagBox[
         StyleBox["QuantumChannel", "Input",
          FontFamily->"Courier"],
         DisplayForm], ".", " ", "Additionally"}]}], ",", " ", 
      RowBox[{
       TagBox[
        StyleBox[
         RowBox[{"InputDim", "[", 
          StyleBox["chan",
           FontSlant->"Italic"], "]"}], "Input",
         FontFamily->"Courier"],
        DisplayForm], " ", "returns", " ", "the", " ", "dimension", " ", "of",
        " ", "the", " ", "input", " ", "space", " ", "of", " ", "the", " ", 
       TagBox[
        StyleBox["QuantumChannel", "Input",
         FontFamily->"Courier"],
        DisplayForm], " ", 
       RowBox[{
        StyleBox[
         TagBox[
          StyleBox["chan", "Input",
           FontFamily->"Courier"],
          DisplayForm],
         FontSlant->"Italic"], "."}]}]}], "Text"]},
   {"OutputDim", "Automatic", 
    RowBox[{
     StyleBox[
      RowBox[{
       TagBox[
        StyleBox["OutputDim", "Input",
         FontFamily->"Courier"],
        DisplayForm], " ", "is", " ", "the", " ", "output", " ", "dimension", 
       " ", "option", " ", "for", " ", 
       RowBox[{
        TagBox[
         StyleBox["QuantumChannel", "Input",
          FontFamily->"Courier"],
         DisplayForm], ".", " ", "Additionally"}]}], "Text"], 
     StyleBox[",", "Text"], 
     StyleBox[" ", "Text"], 
     RowBox[{
      StyleBox[
       TagBox[
        StyleBox[
         RowBox[{"OutputDim", "[", 
          StyleBox["chan",
           FontSlant->"Italic"], "]"}], "Input",
         FontFamily->"Courier"],
        DisplayForm], "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["returns", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["the", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["dimension", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["of", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["the", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["output", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["space", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["of", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["the", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox[
       TagBox[
        StyleBox["QuantumChannel", "Input",
         FontFamily->"Courier"],
        DisplayForm], "Text"], 
      StyleBox[" ", "Text"], 
      RowBox[{
       StyleBox["chan", "Input",
        FontFamily->"Courier",
        FontSlant->"Italic"], 
       StyleBox[".", "Text"]}]}]}]},
   {"Basis", "Automatic", 
    RowBox[{
     StyleBox[
      RowBox[{
       RowBox[{
        TagBox[
         StyleBox["Basis", "Input",
          FontFamily->"Courier"],
         DisplayForm], " ", "is", " ", "the", " ", "option", " ", "for", " ", 
        
        TagBox[
         StyleBox["QuantumChannel", "Input",
          FontFamily->"Courier"],
         DisplayForm], " ", "which", " ", "specifies", " ", "the", " ", 
        "representation", " ", "basis"}], ";", " ", 
       RowBox[{"see", " ", 
        RowBox[{
         TagBox[
          StyleBox["Tensor`Basis", "Input",
           FontFamily->"Courier"],
          DisplayForm], ".", " ", "Additionally"}]}]}], "Text"], 
     StyleBox[",", "Text"], 
     StyleBox[" ", "Text"], 
     RowBox[{
      StyleBox[
       TagBox[
        StyleBox[
         RowBox[{"Basis", "[", 
          StyleBox["chan",
           FontSlant->"Italic"], "]"}], "Input",
         FontFamily->"Courier"],
        DisplayForm], "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["returns", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["the", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["vectorization", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["basis", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["for", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["the", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox[
       TagBox[
        StyleBox["QuantumChannel", "Input",
         FontFamily->"Courier"],
        DisplayForm], "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox[
       RowBox[{
        StyleBox[
         TagBox[
          StyleBox["chan", "Input",
           FontFamily->"Courier"],
          DisplayForm],
         FontSlant->"Italic"], ".", " ", "This"}], "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["basis", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["used", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["for", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["the", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox[
       TagBox[
        StyleBox["Super", "Input",
         FontFamily->"Courier"],
        DisplayForm], "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["and", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox[
       TagBox[
        StyleBox["Choi", "Input",
         FontFamily->"Courier"],
        DisplayForm], "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["representations", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["of", "Text"], 
      StyleBox[" ", "Text"], 
      RowBox[{
       StyleBox["chan", "Input",
        FontFamily->"Courier",
        FontSlant->"Italic"], 
       StyleBox[".", "Text"]}]}]}]}
  },
  GridBoxAlignment->{"Columns" -> {{Left}}},
  GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{True}}},
  GridBoxItemSize->{"Columns" -> {Automatic, Automatic, {
       Scaled[0.5]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
    "RowsIndexed" -> {}}]], "Text",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellChangeTimes->{3.633880600085744*^9}],

Cell[CellGroupData[{

Cell["InputDim", "Subsubsection",
 CellChangeTimes->{{3.633880167408497*^9, 3.633880168394268*^9}}],

Cell[TextData[{
 StyleBox["Inp", "Input"],
 StyleBox["utDim", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" is the input dimension option for ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[". Additionally, ",
  FontColor->GrayLevel[0]],
 StyleBox["InputDim[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the dimension of the input space of the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{
  3.6338803228652163`*^9, {3.633880368704123*^9, 3.6338804152569437`*^9}, {
   3.634167410128924*^9, 3.63416741687106*^9}},
 CellTags->"InputDim::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["OutputDim", "Subsubsection",
 CellChangeTimes->{{3.633880170290258*^9, 3.6338801727177362`*^9}}],

Cell[TextData[{
 StyleBox["OutputDim", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" is the output dimension option for ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[". Additionally, ",
  FontColor->GrayLevel[0]],
 StyleBox["OutputDim[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the dimension of the output space of the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{
  3.633880279144161*^9, {3.6338804225189447`*^9, 3.6338804377859783`*^9}, {
   3.634167413069228*^9, 3.634167414620914*^9}},
 CellTags->"OutputDim::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Basis", "Subsubsection",
 CellChangeTimes->{{3.633880176808527*^9, 3.6338801772159224`*^9}}],

Cell[TextData[{
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" is the option for ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" which specifies the representation basis; see ",
  FontColor->GrayLevel[0]],
 StyleBox["Tensor`Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[". Additionally, ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the vectorization basis for the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[". This basis used for the ",
  FontColor->GrayLevel[0]],
 StyleBox["Super", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" and ",
  FontColor->GrayLevel[0]],
 StyleBox["Choi", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representations of ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{{3.633880189338952*^9, 3.633880191566524*^9}, {
  3.633880425487042*^9, 3.633880481103354*^9}, {3.6341674194696913`*^9, 
  3.634167426605584*^9}},
 CellTags->"Basis::usage"],

Cell[TextData[{
 "Note that ",
 StyleBox["Basis", "Input"],
 " is also defined in the ",
 StyleBox["T", "Input"],
 StyleBox["ensor", "Input"],
 StyleBox["`", "Input"],
 " package."
}], "Text",
 CellChangeTimes->{{3.6338802140101423`*^9, 3.6338802270980797`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Unitary", "Subsection",
 CellChangeTimes->{{3.6337962557881613`*^9, 3.6337962610770197`*^9}, {
  3.633880645526568*^9, 3.633880645607448*^9}}],

Cell[TextData[{
 StyleBox["Construction",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 StyleBox["\n", "Input"],
 StyleBox["Unitary[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" specifies that a matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is a ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" and in the ",
  FontColor->GrayLevel[0]],
 StyleBox["Unitary", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation.",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Transformation",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["Unitary[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" in its current representation while applying any specified \
options ",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\n",
  FontColor->GrayLevel[0]],
 "\n",
 StyleBox["Options",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["\[Bullet]",
  FontColor->GrayLevel[0]],
 StyleBox[" Basis\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["basis", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" specifies the ",
  FontColor->GrayLevel[0]],
 StyleBox["Vec", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" for transformations into the ",
  FontColor->GrayLevel[0]],
 StyleBox["Super", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" and ",
  FontColor->GrayLevel[0]],
 StyleBox["Choi", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representations. The default ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" option is the default ",
  FontColor->GrayLevel[0]],
 StyleBox["Vec", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" option.",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Evolution",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["A ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" in ",
  FontColor->GrayLevel[0]],
 StyleBox["Unitary", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation may be applied to a state to compute its \
evolution. \nIf ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" ", "Input",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["= Unitary[U]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[":\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns a vector formed from applying the unitary to the input \
vector or column vector ",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the the square matrix output for apply ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" to input square matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns a vector formed from applying chan to the vectorized \
input matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[", where ",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is a vector or column vector corresponding to a vectorized square \
matrix.\n\nSee ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" for further information.",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{{3.633876240380179*^9, 3.633876243746312*^9}, {
   3.6338766358316917`*^9, 3.633876636878728*^9}, {3.634167433831285*^9, 
   3.634167617746284*^9}, 3.634167666973329*^9, {3.634167716847608*^9, 
   3.6341677184454193`*^9}, {3.63416776384783*^9, 3.634167764263381*^9}, {
   3.634167878670627*^9, 3.63416789911125*^9}, {3.634168090443084*^9, 
   3.634168108730631*^9}, 3.6341683030444937`*^9, {3.634169401154406*^9, 
   3.634169403360614*^9}, {3.6342986821222277`*^9, 3.634298682842765*^9}, {
   3.634299190523472*^9, 3.634299192356538*^9}},
 CellTags->"Unitary::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Super", "Subsection",
 CellChangeTimes->{{3.6338763682175217`*^9, 3.6338763687523737`*^9}}],

Cell[TextData[{
 StyleBox["Construction",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 StyleBox["\nSuper", "Input"],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" specifies that a matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is a ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" and in the ",
  FontColor->GrayLevel[0]],
 StyleBox["Super", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation.",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Transformation",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["Super[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" into the ",
  FontColor->GrayLevel[0]],
 StyleBox["Super", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation while applying any specified options ",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Options\n",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 StyleBox["\[Bullet]",
  FontColor->GrayLevel[0]],
 StyleBox[" Basis\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["basis", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" specifies the ",
  FontColor->GrayLevel[0]],
 StyleBox["Vec", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" of the input matrix, and specifies the ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" to transform into when transforming to the ",
  FontColor->GrayLevel[0]],
 StyleBox["Super", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation. The default ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" option is the default ",
  FontColor->GrayLevel[0]],
 StyleBox["Vec", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" option.\n",
  FontColor->GrayLevel[0]],
 StyleBox["Example:",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis\[Rule]\[CloseCurlyDoubleQuote]Pauli\[CloseCurlyDoubleQuote]",
   "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" may be used to specify the input is a superoperator in the Pauli \
basis, or to transform a ",
  FontColor->GrayLevel[0]],
 StyleBox["Super", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" into the ",
  FontColor->GrayLevel[0]],
 StyleBox["Pauli", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" basis.\nSee ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" for further information.\n",
  FontColor->GrayLevel[0]],
 "\n",
 StyleBox["Evolution",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["A ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" in ",
  FontColor->GrayLevel[0]],
 StyleBox["Super", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation may be applied to a state to compute its \
evolution. \nIf ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" = Super[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["S", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[":\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the square matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[Projector[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", for the input vector or column vector ",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the the square matrix output for apply ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" to input square matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns ",
  FontColor->GrayLevel[0]],
 StyleBox["S", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[", where ",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is a vector or column vector corresponding to a vectorized square \
matrix.\n\nSee ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel ", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["for further information.",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{
  3.63387635498042*^9, {3.6338764115644093`*^9, 3.6338764197635927`*^9}, {
   3.633876643071212*^9, 3.633876643751851*^9}, {3.6341676596960363`*^9, 
   3.634167954654626*^9}, {3.634167998055176*^9, 3.634168069967763*^9}, 
   3.634168306002734*^9, 3.634168384195554*^9, {3.634169406242713*^9, 
   3.634169407850026*^9}, {3.634170557568439*^9, 3.634170558163872*^9}, {
   3.634298466101584*^9, 3.634298490366618*^9}, {3.6342985411948147`*^9, 
   3.6342985820221653`*^9}, {3.634298677633655*^9, 3.6342986785228662`*^9}, {
   3.634299186507545*^9, 3.634299187958715*^9}},
 CellTags->"Super::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Choi", "Subsection",
 CellChangeTimes->{{3.633796263044033*^9, 3.633796269626878*^9}, {
  3.633876480912574*^9, 3.633876481307466*^9}}],

Cell[TextData[{
 StyleBox["Construction",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 StyleBox["\nChoi", "Input"],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" specifies that a matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is a ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" and in the ",
  FontColor->GrayLevel[0]],
 StyleBox["Choi", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation.",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Transformation",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["Choi[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" into the ",
  FontColor->GrayLevel[0]],
 StyleBox["Choi", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation while applying any specified options ",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Options",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n\[Bullet]",
 StyleBox[" ", "Input"],
 StyleBox["InputDim\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["dIn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["   specifies the dimension of the input space. If this is not \
specified it will attempt to infer the output space for input matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" automatically. If this is fails it will return an error.\n\
\[Bullet]",
  FontColor->GrayLevel[0]],
 StyleBox[" OutputDim\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["dOut", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["  specifies the dimension of the output space. If this is not \
specified it will attempt to infer the output space for input matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" automatically. If this is fails it will return an error.",
  FontColor->GrayLevel[0]],
 "\n",
 StyleBox["\[Bullet]",
  FontColor->GrayLevel[0]],
 StyleBox[" Basis\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["basis", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" specifies the ",
  FontColor->GrayLevel[0]],
 StyleBox["Vec", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" of the input matrix, and specifies the ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" to transform into when transforming to the ",
  FontColor->GrayLevel[0]],
 StyleBox["Choi", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation. The default ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" option is the default ",
  FontColor->GrayLevel[0]],
 StyleBox["Vec", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" option.",
  FontColor->GrayLevel[0]],
 "\n",
 StyleBox["Example:",
  FontSlant->"Italic"],
 " ",
 StyleBox["Basis\[Rule]\[CloseCurlyDoubleQuote]Pauli\[CloseCurlyDoubleQuote]",
   "Input"],
 " may be used to specify the input is a ",
 StyleBox["Choi", "Input"],
 " matrix in the Pauli basis (aka a ",
 StyleBox["Chi", "Input"],
 " matrix), or to transform a ",
 StyleBox["Choi", "Input"],
 " ",
 StyleBox["QuantumChannel", "Input"],
 " into the Pauli basis (into a ",
 StyleBox["Chi", "Input"],
 " matrix).\nSee ",
 StyleBox["Basis", "Input"],
 " for further information.\n\n",
 StyleBox["Evolution",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["A ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" in ",
  FontColor->GrayLevel[0]],
 StyleBox["Choi", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation may be applied to a state to compute its \
evolution. \nIf ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" = Choi[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["\[CapitalLambda]", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[":\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the square matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[Projector[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", for the input vector or column vector ",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the the square matrix output for apply ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" to input square matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns a vector formed from applying chan to the vectorized \
input matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[", where ",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is a vector or column vector corresponding to a vectorized square \
matrix.",
  FontColor->GrayLevel[0]],
 "\n\nSee ",
 StyleBox["QuantumChannel", "Input"],
 " for further information."
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{
  3.63387649664464*^9, {3.633876546740224*^9, 3.633876549523045*^9}, {
   3.633876646744666*^9, 3.633876648671681*^9}, {3.634168127133724*^9, 
   3.634168186965353*^9}, {3.634168217935207*^9, 3.634168369331566*^9}, {
   3.6341684030721684`*^9, 3.634168499671734*^9}, {3.634168773666192*^9, 
   3.63416877380138*^9}, {3.634169410761538*^9, 3.634169412313521*^9}, {
   3.634170425188656*^9, 3.6341704259794292`*^9}, {3.634298631027376*^9, 
   3.634298702959364*^9}, {3.634299181736928*^9, 3.634299183458755*^9}},
 CellTags->"Choi::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Chi", "Subsection",
 CellChangeTimes->{{3.63387660916857*^9, 3.633876609423325*^9}}],

Cell[TextData[{
 StyleBox["Construction",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 StyleBox["\nChi", "Input"],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" specifies that a matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is a ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" and in the ",
  FontColor->GrayLevel[0]],
 StyleBox["Choi", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation",
  FontColor->GrayLevel[0]],
 " in the Pauli basis (unless another basis is specified as an option). The \
",
 StyleBox["Choi", "Input"],
 " matrix in different bases is also known as a ",
 StyleBox["Chi", "Input"],
 " matrix.\n\n",
 StyleBox["Transformation",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["Chi[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" into the ",
  FontColor->GrayLevel[0]],
 StyleBox["Choi", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation",
  FontColor->GrayLevel[0]],
 " in the Pauli basis if no basis is specified as an option. If a basis is \
specified it will transform to the ",
 StyleBox["Choi", "Input"],
 " matrix in that basis.\n\n",
 StyleBox["Options",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n\[Bullet]",
 StyleBox[" ", "Input"],
 StyleBox["InputDim\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["dIn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["   specifies the dimension of the input space. If this is not \
specified it will attempt to infer the output space for input matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" automatically. If this is fails it will return an error.\n\
\[Bullet]",
  FontColor->GrayLevel[0]],
 StyleBox[" OutputDim\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["dOut", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["  specifies the dimension of the output space. If this is not \
specified it will attempt to infer the output space for input matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" automatically. If this is fails it will return an error.",
  FontColor->GrayLevel[0]],
 "\n",
 StyleBox["\[Bullet]",
  FontColor->GrayLevel[0]],
 StyleBox[" Basis\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["basis", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 "specifies the ",
 StyleBox["Vec", "Input"],
 " ",
 StyleBox["Basis", "Input"],
 " of the input matrix.  If this is not specified it defaults to Pauli basis. \
If this option is set ",
 StyleBox["Chi", "Input"],
 " functions identically to ",
 StyleBox["Choi", "Input"],
 ".\nSee ",
 StyleBox["Basis", "Input"],
 " and ",
 StyleBox["Choi", "Input"],
 " for further information.\n\n",
 StyleBox["Evolution",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\nA ",
 StyleBox["QuantumChannel", "Input"],
 " in ",
 StyleBox["Chi", "Input"],
 " (",
 StyleBox["Choi", "Input"],
 ") representation may be applied to a state to compute its evolution. \n",
 StyleBox["If ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" = Chi[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["\[Chi]", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[":\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the square matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[Projector[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", for the input vector or column vector ",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the the square matrix output for apply ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" to input square matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns a vector formed from applying chan to the vectorized \
input matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[", where ",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is a vector or column vector corresponding to a vectorized square \
matrix.",
  FontColor->GrayLevel[0]],
 "\n\nSee ",
 StyleBox["QuantumChannel", "Input"],
 " for further information."
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{
  3.6338766221158457`*^9, {3.6338766528311768`*^9, 3.633876659230603*^9}, {
   3.6341681299235277`*^9, 3.634168189109342*^9}, {3.6341685179569597`*^9, 
   3.634168530992948*^9}, {3.634168645973579*^9, 3.6341687167754927`*^9}, {
   3.634168868441867*^9, 3.634168984895022*^9}, {3.634169415274768*^9, 
   3.6341694169456472`*^9}, {3.6342987882261868`*^9, 3.634298874544236*^9}, 
   3.634299061157748*^9, {3.63429917707942*^9, 3.6342991787676973`*^9}},
 CellTags->"Chi::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Kraus", "Subsection",
 CellChangeTimes->{{3.633876758543516*^9, 3.633876759053301*^9}}],

Cell[TextData[{
 StyleBox["Construction",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 StyleBox["\n", "Input"],
 StyleBox["Kraus[{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["K1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",...,", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["Kn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["},", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" specifies that a list of matrices ",
  FontColor->GrayLevel[0]],
 StyleBox["{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["K1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",...,", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["Kn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" is a ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" and in the ",
  FontColor->GrayLevel[0]],
 StyleBox["Kraus", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation.\n",
  FontColor->GrayLevel[0]],
 StyleBox["Kraus[{{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["K1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",...,", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["Kn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["},{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["L1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",...,", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["Ln", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}},", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" specifies that a list of matrices are a ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" and in the generalized ",
  FontColor->GrayLevel[0]],
 StyleBox["Kraus", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation.",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Transformation",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["Kraus[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" into the ",
  FontColor->GrayLevel[0]],
 StyleBox["Kraus", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation while applying any specified options ",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Options",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["\[Bullet]",
  FontColor->GrayLevel[0]],
 StyleBox[" Basis\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["basis", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" specifies the ",
  FontColor->GrayLevel[0]],
 StyleBox["Vec", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" for transformations into the ",
  FontColor->GrayLevel[0]],
 StyleBox["Super", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" and ",
  FontColor->GrayLevel[0]],
 StyleBox["Choi", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representations. The default ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" option is the default ",
  FontColor->GrayLevel[0]],
 StyleBox["Vec", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["Basis", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" option.",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Evolution",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["A ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" in ",
  FontColor->GrayLevel[0]],
 StyleBox["Kraus", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation may be applied to a state to compute its \
evolution. \nIf ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" = Kraus[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["{", "Input"],
 StyleBox["K1", "Input",
  FontWeight->"Plain"],
 StyleBox[",", "Input"],
 StyleBox["...", "Input",
  FontWeight->"Plain"],
 StyleBox[",", "Input"],
 StyleBox["Kn", "Input",
  FontWeight->"Plain"],
 StyleBox["}", "Input"],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[":\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the square matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[Projector[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", for the input vector or column vector ",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the the square matrix output for apply ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" to input square matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns a vector formed from applying chan to the vectorized \
input matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[", where ",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is a vector or column vector corresponding to a vectorized square \
matrix.",
  FontColor->GrayLevel[0]],
 "\n\nSee ",
 StyleBox["QuantumChannel", "Input"],
 " for further information."
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{{3.6338767698490334`*^9, 3.633876812918076*^9}, 
   3.633876934206915*^9, {3.634168132906143*^9, 3.634168191078205*^9}, {
   3.634168542650556*^9, 3.634168578118479*^9}, {3.634168729563908*^9, 
   3.634168737710164*^9}, {3.6341690139913073`*^9, 3.634169066085037*^9}, {
   3.634169419499282*^9, 3.634169421513569*^9}, {3.634298901805953*^9, 
   3.634298984775247*^9}, {3.6342991709486094`*^9, 3.634299172468626*^9}},
 CellTags->"Kraus::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Stinespring", "Subsection",
 CellChangeTimes->{{3.633876873077907*^9, 3.6338768760129013`*^9}}],

Cell[TextData[{
 StyleBox["Construction",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 StyleBox["\n", "Input"],
 StyleBox["Stinespring[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" specifies that a matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is a ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" and in the ",
  FontColor->GrayLevel[0]],
 StyleBox["Stinespring", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation.\n\n",
  FontColor->GrayLevel[0]],
 StyleBox["Stinespring[{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["},", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" specifies that the matrices ",
  FontColor->GrayLevel[0]],
 StyleBox["{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" are a ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" and in the generalized ",
  FontColor->GrayLevel[0]],
 StyleBox["Stinespring", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation.",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Transformation",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["Stinespring[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" into the ",
  FontColor->GrayLevel[0]],
 StyleBox["Stinespring", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation while applying any specified options ",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Options",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["\[Bullet]",
  FontColor->GrayLevel[0]],
 StyleBox[" OutputDim\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["dOut", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["  specifies the dimension of the output space. If this is not \
specified it will attempt to infer the output space for input matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" automatically. If this is fails it will return an error.",
  FontColor->GrayLevel[0]],
 "\n\[Bullet]",
 StyleBox[" Basis\[Rule]", "Input"],
 StyleBox["basis", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 " which specifies the ",
 StyleBox["Vec", "Input"],
 " ",
 StyleBox["Basis", "Input"],
 " for transformations into the ",
 StyleBox["Super", "Input"],
 " and ",
 StyleBox["Choi", "Input"],
 " representations. The default ",
 StyleBox["Basis", "Input"],
 " option is the default ",
 StyleBox["Vec", "Input"],
 " ",
 StyleBox["Basis", "Input"],
 " option.\n\n",
 StyleBox["Evolution",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["A ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" in ",
  FontColor->GrayLevel[0]],
 StyleBox["Stinespring", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation may be applied to a state to compute its \
evolution. \nIf ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" = Stinespring[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[":\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the square matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[Projector[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", for the input vector or column vector ",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the the square matrix output for apply ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" to input square matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns a vector formed from applying chan to the vectorized \
input matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[", where ",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is a vector or column vector corresponding to a vectorized square \
matrix.",
  FontColor->GrayLevel[0]],
 "\n\nSee ",
 StyleBox["QuantumChannel", "Input"],
 " for further information."
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{{3.6338768794257174`*^9, 3.6338768894376783`*^9}, {
   3.6338769286735773`*^9, 3.633876931478866*^9}, {3.634168135347089*^9, 
   3.6341681931333103`*^9}, {3.634168547115589*^9, 3.634168563906632*^9}, 
   3.6341685954946203`*^9, {3.634168741744877*^9, 3.6341687476629133`*^9}, {
   3.6341687850411463`*^9, 3.634168830093134*^9}, {3.634169424013434*^9, 
   3.634169426177779*^9}, {3.6341704329863377`*^9, 3.63417046575541*^9}, {
   3.6342990268385153`*^9, 3.634299056028947*^9}, {3.634299090199843*^9, 
   3.634299108600361*^9}, {3.634299160585515*^9, 3.634299162499118*^9}},
 CellTags->"Stinespring::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["System-Environment", "Subsection",
 CellChangeTimes->{{3.63387698689329*^9, 3.633876998473349*^9}}],

Cell[TextData[{
 StyleBox["Construction",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 StyleBox["\n", "Input"],
 StyleBox["SysEnv[{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["},", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" specifies that the matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" and vector ",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" are a ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" and in the ",
  FontColor->GrayLevel[0]],
 StyleBox["SysEnv", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation.\n",
  FontColor->GrayLevel[0]],
 StyleBox["SysEnv[{{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["},", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["},", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" specifies that the matrices ",
  FontColor->GrayLevel[0]],
 StyleBox["{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" and vector ",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" are a ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" and in the generalized ",
  FontColor->GrayLevel[0]],
 StyleBox["SysEnv", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation.",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Transformation",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["SysEnv[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" into the ",
  FontColor->GrayLevel[0]],
 StyleBox["SysEnv", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation while applying any specified options ",
  FontColor->GrayLevel[0]],
 StyleBox["opts", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["Options",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n\[Bullet]",
 StyleBox[" Basis\[Rule]", "Input"],
 StyleBox["basis", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 " which specifies the ",
 StyleBox["Vec", "Input"],
 " ",
 StyleBox["Basis", "Input"],
 " for transformations into the ",
 StyleBox["Super", "Input"],
 " and ",
 StyleBox["Choi", "Input"],
 " representations. The default ",
 StyleBox["Basis", "Input"],
 " option is the default ",
 StyleBox["Vec", "Input"],
 " ",
 StyleBox["Basis", "Input"],
 " option.\n\n",
 StyleBox["Evolution",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n",
 StyleBox["A ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" in ",
  FontColor->GrayLevel[0]],
 StyleBox["SysEnv", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation may be applied to a state to compute its \
evolution. \nIf ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" = SysEnv[{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["U", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["v0", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[":\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the square matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[Projector[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", for the input vector or column vector ",
  FontColor->GrayLevel[0]],
 StyleBox["vec", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the the square matrix output for apply ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" to input square matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\[Bullet] ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns a vector formed from applying chan to the vectorized \
input matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[", where ",
  FontColor->GrayLevel[0]],
 StyleBox["vecMat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is a vector or column vector corresponding to a vectorized square \
matrix.",
  FontColor->GrayLevel[0]],
 "\n\nSee ",
 StyleBox["QuantumChannel", "Input"],
 " for further information."
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{{3.633877010896421*^9, 3.633877031452065*^9}, {
   3.6341681375230722`*^9, 3.634168197670475*^9}, 3.634168551308009*^9, {
   3.634168586693243*^9, 3.6341686289546623`*^9}, {3.634168752581564*^9, 
   3.6341687590869827`*^9}, {3.63416908471635*^9, 3.634169132963215*^9}, {
   3.634169428580132*^9, 3.634169430702869*^9}, {3.634299118343618*^9, 
   3.6342991671451893`*^9}, {3.634299198802853*^9, 3.6342992016491327`*^9}},
 CellTags->"SysEnv::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["ChannelRep", "Subsection",
 CellChangeTimes->{{3.633880029286785*^9, 3.633880032834477*^9}}],

Cell[TextData[{
 StyleBox["ChannelRep[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the representation of the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{
  3.633880053122923*^9, {3.6341665346593933`*^9, 3.6341665385358143`*^9}, {
   3.6342992589665728`*^9, 3.634299259866507*^9}},
 CellTags->"ChannelRep::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["ChannelParameters", "Subsection",
 CellChangeTimes->{{3.633880036481862*^9, 3.633880041105516*^9}}],

Cell[TextData[{
 StyleBox["ChannelParameters[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the parameters of the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[". This is a list of ",
  FontColor->GrayLevel[0]],
 StyleBox["{ChannelRep\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["rep", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",InputDim\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["dIn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",OutputDim\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["dOut", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",Basis\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["basis", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{{3.6338800857154617`*^9, 3.6338800883147593`*^9}, {
  3.634166543505431*^9, 3.6341665816572237`*^9}},
 CellTags->"ChannelParameters::usage"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Channel Predicates", "Section",
 CellChangeTimes->{{3.6337958894851093`*^9, 3.633795890575067*^9}, {
  3.634163285033532*^9, 3.634163285760235*^9}}],

Cell[CellGroupData[{

Cell["Completely Positive", "Subsection",
 CellChangeTimes->{{3.634163298823729*^9, 3.634163310832082*^9}, {
  3.634164412103078*^9, 3.634164412663082*^9}}],

Cell[TextData[{
 StyleBox["CompletelyPositiveQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" yeilds ",
  FontColor->GrayLevel[0]],
 StyleBox["True", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" if the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is a completely positive channel, and yields ",
  FontColor->GrayLevel[0]],
 StyleBox["False", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" otherwise.\n\n",
  FontColor->GrayLevel[0]],
 StyleBox["CompletelyPositiveQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",Simplify\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["fun", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" applies the pure function ",
  FontColor->GrayLevel[0]],
 StyleBox["CompletelyPositiveQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["fun", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["choi", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" where ",
  FontColor->GrayLevel[0]],
 StyleBox["choi", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is the ",
  FontColor->GrayLevel[0]],
 StyleBox["Choi", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" matrix representaiton of ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[". This may be used to simplify the expression with assumptions for \
symbolic channels.\n\n",
  FontColor->GrayLevel[0]],
 StyleBox["Example:",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["CompletelyPositiveQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",FullSimplify[#,{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["a", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["b", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["c", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}\[Element]Reals]&]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", or ",
  FontColor->GrayLevel[0]],
 StyleBox["CompletelyPositiveQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",ComplexExpand]", "Input",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{
  3.634163351867445*^9, {3.634164050933682*^9, 3.634164085950829*^9}, {
   3.63416413520212*^9, 3.634164144770364*^9}, 3.634166219820169*^9, {
   3.634166735040598*^9, 3.634166738503635*^9}, 3.634299388253508*^9},
 CellTags->"CompletelyPositiveQ::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Trace Preserving", "Subsection",
 CellChangeTimes->{{3.634163313960672*^9, 3.6341633159287558`*^9}, {
  3.634164414527205*^9, 3.634164415126813*^9}}],

Cell[TextData[{
 StyleBox["TracePreservingQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["] ", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["yeilds True if the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is a trace preserving channel, and yields ",
  FontColor->GrayLevel[0]],
 StyleBox["False", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" otherwise.",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["TracePreservingQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",Simplify\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["fun", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" applies the pure function ",
  FontColor->GrayLevel[0]],
 StyleBox["TracePreservingQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["fun", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["choi", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" where ",
  FontColor->GrayLevel[0]],
 StyleBox["choi", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is the ",
  FontColor->GrayLevel[0]],
 StyleBox["Choi", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" matrix representaiton of ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[". This may be used to simplify the expression with assumptions for \
symbolic channels.\n\n",
  FontColor->GrayLevel[0]],
 StyleBox["Example:",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["TracePreservingQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",FullSimplify[#,{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["a", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["b", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["c", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}\[Element]Reals]&]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", or ",
  FontColor->GrayLevel[0]],
 StyleBox["TracePreservingQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",ComplexExpand]", "Input",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{{3.6341637559686527`*^9, 3.634163762669669*^9}, {
   3.634163877210333*^9, 3.634163878241892*^9}, {3.634163912972487*^9, 
   3.634163973445751*^9}, {3.63416408776619*^9, 3.634164088326902*^9}, 
   3.6341662180120583`*^9, {3.634166747373219*^9, 3.634166749401022*^9}, {
   3.634299341861849*^9, 3.634299413229549*^9}},
 CellTags->"TracePreservingQ::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Hermitian Preserving", "Subsection",
 CellChangeTimes->{{3.634163323453595*^9, 3.634163329053791*^9}, {
  3.634164416574853*^9, 3.63416441719086*^9}}],

Cell[TextData[{
 StyleBox["HermitianPreservingQ[", "Input"],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["] ", "Input"],
 "yeilds True if the ",
 StyleBox["QuantumChannel", "Input"],
 " ",
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 " is a Hermitian preserving channel, and yields ",
 StyleBox["False", "Input"],
 " otherwise.\n\n",
 StyleBox["HermitianPreservingQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",Simplify\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["fun", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" applies the pure function ",
  FontColor->GrayLevel[0]],
 StyleBox["HermitianPreservingQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["fun", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["choi", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" where ",
  FontColor->GrayLevel[0]],
 StyleBox["choi", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is the ",
  FontColor->GrayLevel[0]],
 StyleBox["Choi", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" matrix representaiton of ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[". This may be used to simplify the expression with assumptions for \
symbolic channels.\n\n",
  FontColor->GrayLevel[0]],
 StyleBox["Example:",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["HermitianPreservingQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",FullSimplify[#,{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["a", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["b", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["c", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}\[Element]Reals]&]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", or ",
  FontColor->GrayLevel[0]],
 StyleBox["HermitianPreservingQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",ComplexExpand]", "Input",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{{3.6341637559686527`*^9, 3.634163762669669*^9}, {
   3.634163877210333*^9, 3.634163878241892*^9}, {3.634163912972487*^9, 
   3.634163973445751*^9}, {3.63416408776619*^9, 3.634164088326902*^9}, {
   3.634164172328318*^9, 3.634164210386231*^9}, 3.634166216324772*^9, {
   3.6341667567384567`*^9, 3.634166759977413*^9}, {3.634299397391348*^9, 
   3.634299424985209*^9}},
 CellTags->"HermitianPreservingQ::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Unital", "Subsection",
 CellChangeTimes->{{3.634163332893929*^9, 3.6341633337351294`*^9}, 
   3.634164418623041*^9}],

Cell[TextData[{
 StyleBox["UnitalQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["] ", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["yeilds True if the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is a unital channel, and yields ",
  FontColor->GrayLevel[0]],
 StyleBox["False", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" otherwise.\n\n",
  FontColor->GrayLevel[0]],
 StyleBox["UnitalQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",Simplify\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["fun", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" applies the pure function ",
  FontColor->GrayLevel[0]],
 StyleBox["UnitalQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["fun", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["choi", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" where ",
  FontColor->GrayLevel[0]],
 StyleBox["choi", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is the ",
  FontColor->GrayLevel[0]],
 StyleBox["Choi", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" matrix representaiton of ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[". This may be used to simplify the expression with assumptions for \
symbolic channels.\n\n",
  FontColor->GrayLevel[0]],
 StyleBox["Example:",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["UnitalQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",FullSimplify[#,{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["a", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["b", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["c", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}\[Element]Reals]&]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", or ",
  FontColor->GrayLevel[0]],
 StyleBox["UnitalQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",ComplexExpand]", "Input",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{{3.6341637559686527`*^9, 3.634163762669669*^9}, {
  3.634163877210333*^9, 3.634163878241892*^9}, {3.634163912972487*^9, 
  3.634163973445751*^9}, {3.63416408776619*^9, 3.634164088326902*^9}, {
  3.634164256677738*^9, 3.634164270620215*^9}, {3.634164309381913*^9, 
  3.634164311877493*^9}, {3.634166210859696*^9, 3.634166214427957*^9}, {
  3.6341667624587*^9, 3.634166764353469*^9}, {3.634299443280422*^9, 
  3.634299459761408*^9}},
 CellTags->"UnitalQ::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pauli Channel", "Subsection",
 CellChangeTimes->{{3.634163335638031*^9, 3.634163337350543*^9}, {
  3.634164420479189*^9, 3.6341644223356543`*^9}}],

Cell[TextData[{
 StyleBox["PauliChannelQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["] ", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["yeilds True if the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is a Pauli channel, and yields ",
  FontColor->GrayLevel[0]],
 StyleBox["False", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" otherwise. A Pauli channel has a diagonal Choi-matrix when \
represented in the Pauli basis.",
  FontColor->GrayLevel[0]],
 "\n\n",
 StyleBox["PauliChannelQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",Simplify\[Rule]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["fun", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" applies the pure function ",
  FontColor->GrayLevel[0]],
 StyleBox["PauliChannelQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["fun", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["choi", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" where ",
  FontColor->GrayLevel[0]],
 StyleBox["choi", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is the ",
  FontColor->GrayLevel[0]],
 StyleBox["Choi", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" matrix representaiton of ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[". This may be used to simplify the expression with assumptions for \
symbolic channels.\n\n",
  FontColor->GrayLevel[0]],
 StyleBox["Example:",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["PauliChannelQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",FullSimplify[#,{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["a", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["b", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["c", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}\[Element]Reals]&]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", or ",
  FontColor->GrayLevel[0]],
 StyleBox["PauliChannelQ[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",ComplexExpand]", "Input",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{{3.6341637559686527`*^9, 3.634163762669669*^9}, {
   3.634163877210333*^9, 3.634163878241892*^9}, {3.634163912972487*^9, 
   3.634163973445751*^9}, {3.63416408776619*^9, 3.634164088326902*^9}, {
   3.634164272580336*^9, 3.634164356477573*^9}, 3.634166208511129*^9, {
   3.6341667659368973`*^9, 3.634166767922925*^9}, {3.634299483735487*^9, 
   3.63429949529807*^9}},
 CellTags->"PauliChannelQ::usage"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Channel Functions", "Section",
 CellChangeTimes->{{3.6337958629257603`*^9, 3.633795866880727*^9}}],

Cell[CellGroupData[{

Cell["Process Fidelity", "Subsection",
 CellChangeTimes->{{3.634164390119116*^9, 3.634164392006612*^9}}],

Cell[TextData[{
 StyleBox["ProcessFidelity[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the process fidelity for comparing channel ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" with the identity channel.\n\n",
  FontColor->GrayLevel[0]],
 StyleBox["ProcessFidelity[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the process fidelity for comparing ",
  FontColor->GrayLevel[0]],
 StyleBox["chan1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" to ",
  FontColor->GrayLevel[0]],
 StyleBox["chan2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\nThe process fidelity of two channels with superoperators ",
  FontColor->GrayLevel[0]],
 StyleBox["S1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" and ",
  FontColor->GrayLevel[0]],
 StyleBox["S2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is given by ",
  FontColor->GrayLevel[0]],
 StyleBox["Tr[ConjugateTranspose[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["S1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["].", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["S2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{
  3.634163351867445*^9, {3.634164050933682*^9, 3.634164085950829*^9}, {
   3.63416413520212*^9, 3.634164144770364*^9}, {3.6341644378016577`*^9, 
   3.63416453244445*^9}, {3.634165025058342*^9, 3.63416503247506*^9}, 
   3.634166204971498*^9},
 CellTags->"ProcessFidelity::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Gate Fidelity", "Subsection",
 CellChangeTimes->{{3.63416439361429*^9, 3.6341643953666353`*^9}}],

Cell[TextData[{
 StyleBox["GateFidelity[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["state", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["chan1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["chan2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the gate fidelity ",
  FontColor->GrayLevel[0]],
 StyleBox["Fidelity[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["state", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["chan1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["state", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" for comparing the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" to ",
  FontColor->GrayLevel[0]],
 StyleBox["chan2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" for the given input vector or density matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["state", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\n",
  FontColor->GrayLevel[0]],
 StyleBox["GateFidelity[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["state", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the gate fidelity for comparing ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" to the identity channel.",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{
  3.634163351867445*^9, {3.634164050933682*^9, 3.634164085950829*^9}, {
   3.63416413520212*^9, 3.634164144770364*^9}, {3.6341644378016577`*^9, 
   3.63416453244445*^9}, {3.634164687226338*^9, 3.6341648736875668`*^9}, 
   3.6341662023715*^9},
 CellTags->"GateFidelity::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Average Gate Fidelity", "Subsection",
 CellChangeTimes->{{3.634164397862177*^9, 3.6341644001913843`*^9}}],

Cell[TextData[{
 StyleBox["AverageGateFidelity[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["returns the average gate fidelity for comparing the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" to the identity channel averaged over all input states.\n\n",
  FontColor->GrayLevel[0]],
 StyleBox["AverageGateFidelity[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the average gate fidelity for comparing ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" to ",
  FontColor->GrayLevel[0]],
 StyleBox["chan2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["  averaged over all input states. This is given by ",
  FontColor->GrayLevel[0]],
 StyleBox["AverageGateFidelity[ConjugateTranspose[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["].", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{
  3.634163351867445*^9, {3.634164050933682*^9, 3.634164085950829*^9}, {
   3.63416413520212*^9, 3.634164144770364*^9}, {3.6341644378016577`*^9, 
   3.63416453244445*^9}, {3.6341648883193617`*^9, 3.634165041939763*^9}, 
   3.634166201059535*^9},
 CellTags->"AverageGateFidelity::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Entanglement Fidelity", "Subsection",
 CellChangeTimes->{{3.6341644048304777`*^9, 3.634164407671647*^9}}],

Cell[TextData[{
 StyleBox["EntanglementFidelity[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["state", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the  entanglement fidelity for comparing the  ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" to the identity channel for the given input state vector or \
density matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["state", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\n",
  FontColor->GrayLevel[0]],
 StyleBox["EntanglementFidelity[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["state", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["chan1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["chan2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the entanglement fidelity for comparing ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["chan1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" to ",
  FontColor->GrayLevel[0]],
 StyleBox["chan2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["  for the given input vector or density matrix ",
  FontColor->GrayLevel[0]],
 StyleBox["state", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[". This is given by ",
  FontColor->GrayLevel[0]],
 StyleBox["EntanglementFidelity[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["state", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",ConjugateTranspose[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["].", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{
  3.634163351867445*^9, {3.634164050933682*^9, 3.634164085950829*^9}, {
   3.63416413520212*^9, 3.634164144770364*^9}, {3.6341644378016577`*^9, 
   3.63416453244445*^9}, {3.6341650470931673`*^9, 3.634165168808154*^9}, {
   3.634166198149124*^9, 3.634166199467925*^9}, {3.634299645754676*^9, 
   3.634299647509036*^9}},
 CellTags->"EntanglementFidelity::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Channel Volume", "Subsection",
 CellChangeTimes->{{3.6341644262409678`*^9, 3.634164427832239*^9}}],

Cell[TextData[{
 StyleBox["ChannelVolume[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns the volume of the hyperellipsoidal image of the \
Bloch-hypersphere under the action of a channel as a multiple of the unit \
hypersphere volume.",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{
  3.634163351867445*^9, {3.634164050933682*^9, 3.634164085950829*^9}, {
   3.63416413520212*^9, 3.634164144770364*^9}, {3.6341644378016577`*^9, 
   3.63416453244445*^9}, {3.634165176860461*^9, 3.634165205609693*^9}},
 CellTags->"ChannelVolume::usage"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Special Channels", "Section",
 CellChangeTimes->{{3.633795871486487*^9, 3.633795874039425*^9}}],

Cell[CellGroupData[{

Cell["Commutator Channel", "Subsection",
 CellChangeTimes->{{3.6341653174406977`*^9, 3.634165319904386*^9}}],

Cell[TextData[{
 StyleBox["ComChannel[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns a ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" in the ",
  FontColor->GrayLevel[0]],
 StyleBox["Super", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation corresponding to the commutator superoperator ",
  FontColor->GrayLevel[0]],
 StyleBox["Ad[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" defined by ",
  FontColor->GrayLevel[0]],
 StyleBox["Ad[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["][", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["B", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]=", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["B", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["-", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["B", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["\nThe input ",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" must be a matrix or a ",
  FontColor->GrayLevel[0]],
 StyleBox["Unitary", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{
  3.634165384927226*^9, {3.634165646326961*^9, 3.6341657108548203`*^9}, {
   3.634165852158893*^9, 3.6341658539027843`*^9}, 3.6342997059985027`*^9},
 CellTags->"ComChannel::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Anti-Commutator Channel", "Subsection",
 CellChangeTimes->{{3.634165322264154*^9, 3.634165325968779*^9}}],

Cell[TextData[{
 StyleBox["ComChannel[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns a ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" in the ",
  FontColor->GrayLevel[0]],
 StyleBox["Super", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation corresponding to the anti-commutator superoperator \
",
  FontColor->GrayLevel[0]],
 StyleBox["AAd[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" defined by ",
  FontColor->GrayLevel[0]],
 StyleBox["AAd[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["][", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["B", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]=", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["B", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["+", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["B", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["\nThe input ",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" must be a matrix or a ",
  FontColor->GrayLevel[0]],
 StyleBox["Unitary", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{
  3.634165390622487*^9, {3.634165688185493*^9, 3.634165712526169*^9}, {
   3.634165849967408*^9, 3.63416586193536*^9}, 3.634299720071805*^9},
 CellTags->"AComChannel::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Lindblad Dissipator Channel", "Subsection",
 CellChangeTimes->{{3.6341653288243017`*^9, 3.63416534928165*^9}}],

Cell[TextData[{
 StyleBox["LindbladDissipator[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["] returns a ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" in the ",
  FontColor->GrayLevel[0]],
 StyleBox["Super", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation corresponding to the Lindblad dissipator ",
  FontColor->GrayLevel[0]],
 StyleBox["D[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" defined by ",
  FontColor->GrayLevel[0]],
 StyleBox["D[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["][", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["B", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]=", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["B", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["\[HermitianConjugate]-", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["\[HermitianConjugate].", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["B", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["/2-", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["B", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["\[HermitianConjugate].", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["/2", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["\nThe input ",
  FontColor->GrayLevel[0]],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" must be a matrix or a ",
  FontColor->GrayLevel[0]],
 StyleBox["Unitary", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\n",
  FontColor->GrayLevel[0]],
 StyleBox["LindbladDissipator[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["A1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",...,", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["An", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["] ", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["returns ",
  FontColor->GrayLevel[0]],
 StyleBox["LindbladDissipator[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["A1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]+...+LindbladDissipator[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["An", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\n",
  FontColor->GrayLevel[0]],
 StyleBox["LindbladDissipator[{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["A1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",...,", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["An", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}] ", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["returns ",
  FontColor->GrayLevel[0]],
 StyleBox["LindbladDissipator[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["A1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]+...+LindbladDissipator[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["An", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{
  3.634165397222829*^9, 3.634165502054596*^9, {3.634165724446816*^9, 
   3.634165792323366*^9}, {3.6341658268402443`*^9, 3.634165838063636*^9}, {
   3.63416587955766*^9, 3.6341659340976133`*^9}, {3.6341661916990967`*^9, 
   3.6341661921789513`*^9}, 3.6342997395794277`*^9},
 CellTags->"LindbladDissipator::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Lindblad Equation Channel", "Subsection",
 CellChangeTimes->{{3.634165333416449*^9, 3.634165343953916*^9}}],

Cell[TextData[{
 StyleBox["Lindblad[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns ",
  FontColor->GrayLevel[0]],
 StyleBox["-I*ComChannel[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", the Lindblad equation ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel ", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["for Hamiltonian evolution under ",
  FontColor->GrayLevel[0]],
 StyleBox["mat", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\n",
  FontColor->GrayLevel[0]],
 StyleBox["Lindblad[{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",...,", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["matn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns ",
  FontColor->GrayLevel[0]],
 StyleBox["LindbladDissipator[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["mat1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",...,", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["matn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[", the Lindblad equation ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" for dissipative evolution with collapse operators ",
  FontColor->GrayLevel[0]],
 StyleBox["mat1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",...,", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["matn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\n",
  FontColor->GrayLevel[0]],
 StyleBox["Lindblad[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["expr1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["expr2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",...", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" evaluates each expression in the Sequence ",
  FontColor->GrayLevel[0]],
 StyleBox["expr1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox["expr2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",...", "Input",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]],
 StyleBox[" as either a Hamiltonian or list of collapse operators and returns \
the ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChanne", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["l for the sum of the results.",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{
  3.6341654068875227`*^9, {3.634165482727002*^9, 3.63416549595042*^9}, {
   3.634165993734919*^9, 3.63416609894508*^9}, {3.634166188476705*^9, 
   3.63416618954702*^9}, {3.634299800768305*^9, 3.634299802917696*^9}},
 CellTags->"Lindblad::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Swap Channel", "Subsection",
 CellChangeTimes->{{3.634165355969396*^9, 3.634165357306175*^9}}],

Cell[TextData[{
 StyleBox["SwapChannel[{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["i1,i2,...,in", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["},{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["d1,d2,...,dn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}", "Input",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns a ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" in the ",
  FontColor->GrayLevel[0]],
 StyleBox["Super", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation corresponding to a permutation of n-subsystems of \
the input Hilbert space.\n\[Bullet]",
  FontColor->GrayLevel[0]],
 StyleBox[" {", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["i1,i2,...,in", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" specifies the order of the input subsystems in the output space.\n\
\[Bullet]",
  FontColor->GrayLevel[0]],
 StyleBox[" {", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["d1,d2,...,dn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}", "Input",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is the list of all the input Hilbert space subsystem dimensions. \
\n\n",
  FontColor->GrayLevel[0]],
 StyleBox["SwapChannel[{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["i1,i2,...,in", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["},", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["d", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["] ", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["returns a ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" in the ",
  FontColor->GrayLevel[0]],
 StyleBox["Super", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation corresponding to a permutation of n-subsystems of \
the input Hilbert space each with dimension ",
  FontColor->GrayLevel[0]],
 StyleBox["d", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[". \n\n",
  FontColor->GrayLevel[0]],
 StyleBox["SwapChannel[{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["i1,i2,...,in", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}] ", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["returns a ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" in the ",
  FontColor->GrayLevel[0]],
 StyleBox["Super", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation corresponding to a permutation of n 2-dimesnional \
subsystems of the input Hilbert space.",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallCircle]",
 CellChangeTimes->{
  3.634165414961461*^9, {3.634166124184321*^9, 3.6341661865088043`*^9}, {
   3.634166229029566*^9, 3.634166342944976*^9}, {3.634299832797452*^9, 
   3.634299833607061*^9}, {3.6342998679907837`*^9, 3.6342998684404297`*^9}},
 CellTags->"SwapChannel::usage"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Partial Trace Channel", "Subsection",
 CellChangeTimes->{{3.634165361601445*^9, 3.634165364586668*^9}}],

Cell[TextData[{
 StyleBox["PartialTrChannel[{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["d1,d2,...,dn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}", "Input",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["i1,...,ik", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}", "Input",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" returns a ",
  FontColor->GrayLevel[0]],
 StyleBox["QuantumChannel", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" in the ",
  FontColor->GrayLevel[0]],
 StyleBox["Super", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[" representation corresponding to the partial trace: ",
  FontColor->GrayLevel[0]],
 StyleBox["PartialTrChannel[{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["d1,d2,...,dn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}", "Input",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["i1,...,ik", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}", "Input",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["][", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["B", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]=PartialTr[", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["B", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["d1,d2,...,dn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}", "Input",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[",{", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["i1,...,ik", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}", "Input",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["]", "Input",
  FontColor->GrayLevel[0]],
 StyleBox[".\n\[Bullet]",
  FontColor->GrayLevel[0]],
 StyleBox[" {", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["d1,d2,...,dn", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}", "Input",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" are the dimensions of the subsystem input Hilbert spaces.\n\
\[Bullet]",
  FontColor->GrayLevel[0]],
 StyleBox[" {", "Input",
  FontColor->GrayLevel[0]],
 StyleBox["i1,...,ik", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["}", "Input",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is a list of the subsystems to be traced over.",
  FontColor->GrayLevel[0]]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellChangeTimes->{
  3.6341654212791452`*^9, {3.6341663649964046`*^9, 3.634166518911268*^9}, {
   3.634299858739788*^9, 3.6342998657406263`*^9}},
 CellTags->"PartialTrChannel::usage"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{904, 755},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
FrontEndVersion->"10.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (December 4, \
2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "AComChannel::usage"->{
  Cell[126973, 4413, 2554, 94, 71, "Text",
   CellTags->"AComChannel::usage"]},
 "AverageGateFidelity::usage"->{
  Cell[117300, 4077, 2362, 76, 109, "Text",
   CellTags->"AverageGateFidelity::usage"]},
 "Basis::usage"->{
  Cell[29034, 961, 1583, 52, 71, "Text",
   CellTags->"Basis::usage"]},
 "ChannelParameters::usage"->{
  Cell[90524, 3143, 1556, 53, 51, "Text",
   CellTags->"ChannelParameters::usage"]},
 "ChannelRep::usage"->{
  Cell[89592, 3109, 787, 26, 31, "Text",
   CellTags->"ChannelRep::usage"]},
 "ChannelVolume::usage"->{
  Cell[123235, 4279, 750, 19, 50, "Text",
   CellTags->"ChannelVolume::usage"]},
 "Chi::usage"->{
  Cell[55367, 1887, 7863, 269, 522, "Text",
   CellTags->"Chi::usage"]},
 "Choi::usage"->{
  Cell[46363, 1574, 8874, 305, 522, "Text",
   CellTags->"Choi::usage"]},
 "ComChannel::usage"->{
  Cell[124271, 4312, 2551, 93, 71, "Text",
   CellTags->"ComChannel::usage"]},
 "CompletelyPositiveQ::usage"->{
  Cell[92467, 3212, 3631, 125, 184, "Text",
   CellTags->"CompletelyPositiveQ::usage"]},
 "EntanglementFidelity::usage"->{
  Cell[119813, 4161, 3278, 110, 130, "Text",
   CellTags->"EntanglementFidelity::usage"]},
 "GateFidelity::usage"->{
  Cell[114117, 3962, 3032, 107, 90, "Text",
   CellTags->"GateFidelity::usage"]},
 "HermitianPreservingQ::usage"->{
  Cell[100114, 3478, 3442, 115, 185, "Text",
   CellTags->"HermitianPreservingQ::usage"]},
 "InputDim::usage"->{
  Cell[26618, 876, 1077, 35, 51, "Text",
   CellTags->"InputDim::usage"]},
 "Kraus::usage"->{
  Cell[63363, 2164, 8765, 315, 461, "Text",
   CellTags->"Kraus::usage"]},
 "LindbladDissipator::usage"->{
  Cell[129683, 4515, 5405, 196, 149, "Text",
   CellTags->"LindbladDissipator::usage"]},
 "Lindblad::usage"->{
  Cell[135241, 4719, 3702, 128, 169, "Text",
   CellTags->"Lindblad::usage"]},
 "OutputDim::usage"->{
  Cell[27837, 919, 1059, 34, 51, "Text",
   CellTags->"OutputDim::usage"]},
 "PartialTrChannel::usage"->{
  Cell[142587, 4971, 3155, 111, 111, "Text",
   CellTags->"PartialTrChannel::usage"]},
 "PauliChannelQ::usage"->{
  Cell[107580, 3735, 3727, 125, 148, "Text",
   CellTags->"PauliChannelQ::usage"]},
 "ProcessFidelity::usage"->{
  Cell[111592, 3874, 2383, 80, 90, "Text",
   CellTags->"ProcessFidelity::usage"]},
 "QuantumChannel::usage"->{
  Cell[2616, 74, 17481, 587, 1130, "Text",
   CellTags->"QuantumChannel::usage"]},
 "Stinespring::usage"->{
  Cell[72269, 2487, 8533, 298, 501, "Text",
   CellTags->"Stinespring::usage"]},
 "Super::usage"->{
  Cell[37967, 1278, 8215, 287, 443, "Text",
   CellTags->"Super::usage"]},
 "SwapChannel::usage"->{
  Cell[139083, 4855, 3355, 108, 207, "Text",
   CellTags->"SwapChannel::usage"]},
 "SysEnv::usage"->{
  Cell[80947, 2793, 8507, 308, 461, "Text",
   CellTags->"SysEnv::usage"]},
 "TracePreservingQ::usage"->{
  Cell[96293, 3346, 3625, 123, 148, "Text",
   CellTags->"TracePreservingQ::usage"]},
 "UnitalQ::usage"->{
  Cell[103718, 3602, 3670, 124, 129, "Text",
   CellTags->"UnitalQ::usage"]},
 "Unitary::usage"->{
  Cell[31082, 1034, 6748, 236, 402, "Text",
   CellTags->"Unitary::usage"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"AComChannel::usage", 146097, 5098},
 {"AverageGateFidelity::usage", 146210, 5101},
 {"Basis::usage", 146318, 5104},
 {"ChannelParameters::usage", 146421, 5107},
 {"ChannelRep::usage", 146530, 5110},
 {"ChannelVolume::usage", 146634, 5113},
 {"Chi::usage", 146732, 5116},
 {"Choi::usage", 146823, 5119},
 {"ComChannel::usage", 146921, 5122},
 {"CompletelyPositiveQ::usage", 147033, 5125},
 {"EntanglementFidelity::usage", 147156, 5128},
 {"GateFidelity::usage", 147273, 5131},
 {"HermitianPreservingQ::usage", 147389, 5134},
 {"InputDim::usage", 147502, 5137},
 {"Kraus::usage", 147596, 5140},
 {"LindbladDissipator::usage", 147703, 5143},
 {"Lindblad::usage", 147814, 5146},
 {"OutputDim::usage", 147916, 5149},
 {"PartialTrChannel::usage", 148022, 5152},
 {"PauliChannelQ::usage", 148136, 5155},
 {"ProcessFidelity::usage", 148249, 5158},
 {"QuantumChannel::usage", 148361, 5161},
 {"Stinespring::usage", 148469, 5164},
 {"Super::usage", 148569, 5167},
 {"SwapChannel::usage", 148669, 5170},
 {"SysEnv::usage", 148771, 5173},
 {"TracePreservingQ::usage", 148877, 5176},
 {"UnitalQ::usage", 148984, 5179},
 {"Unitary::usage", 149083, 5182}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 257, 3, 65, "Chapter"],
Cell[CellGroupData[{
Cell[862, 29, 144, 2, 64, "Section"],
Cell[1009, 33, 339, 5, 28, "Input"],
Cell[1351, 40, 182, 4, 30, "Text"],
Cell[1536, 46, 142, 2, 28, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1715, 53, 110, 1, 64, "Section"],
Cell[1828, 56, 502, 8, 87, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2367, 69, 246, 3, 64, "Section"],
Cell[2616, 74, 17481, 587, 1130, "Text",
 CellTags->"QuantumChannel::usage"],
Cell[CellGroupData[{
Cell[20122, 665, 97, 1, 44, "Subsection"],
Cell[20222, 668, 145, 2, 28, "Input"],
Cell[20370, 672, 6121, 197, 313, "Text"],
Cell[CellGroupData[{
Cell[26516, 873, 99, 1, 35, "Subsubsection"],
Cell[26618, 876, 1077, 35, 51, "Text",
 CellTags->"InputDim::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27732, 916, 102, 1, 35, "Subsubsection"],
Cell[27837, 919, 1059, 34, 51, "Text",
 CellTags->"OutputDim::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[28933, 958, 98, 1, 35, "Subsubsection"],
Cell[29034, 961, 1583, 52, 71, "Text",
 CellTags->"Basis::usage"],
Cell[30620, 1015, 262, 9, 31, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[30931, 1030, 148, 2, 44, "Subsection"],
Cell[31082, 1034, 6748, 236, 402, "Text",
 CellTags->"Unitary::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37867, 1275, 97, 1, 44, "Subsection"],
Cell[37967, 1278, 8215, 287, 443, "Text",
 CellTags->"Super::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46219, 1570, 141, 2, 44, "Subsection"],
Cell[46363, 1574, 8874, 305, 522, "Text",
 CellTags->"Choi::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55274, 1884, 90, 1, 44, "Subsection"],
Cell[55367, 1887, 7863, 269, 522, "Text",
 CellTags->"Chi::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63267, 2161, 93, 1, 44, "Subsection"],
Cell[63363, 2164, 8765, 315, 461, "Text",
 CellTags->"Kraus::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72165, 2484, 101, 1, 44, "Subsection"],
Cell[72269, 2487, 8533, 298, 501, "Text",
 CellTags->"Stinespring::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[80839, 2790, 105, 1, 44, "Subsection"],
Cell[80947, 2793, 8507, 308, 461, "Text",
 CellTags->"SysEnv::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[89491, 3106, 98, 1, 44, "Subsection"],
Cell[89592, 3109, 787, 26, 31, "Text",
 CellTags->"ChannelRep::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[90416, 3140, 105, 1, 44, "Subsection"],
Cell[90524, 3143, 1556, 53, 51, "Text",
 CellTags->"ChannelParameters::usage"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[92129, 3202, 154, 2, 64, "Section"],
Cell[CellGroupData[{
Cell[92308, 3208, 156, 2, 44, "Subsection"],
Cell[92467, 3212, 3631, 125, 184, "Text",
 CellTags->"CompletelyPositiveQ::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[96135, 3342, 155, 2, 44, "Subsection"],
Cell[96293, 3346, 3625, 123, 148, "Text",
 CellTags->"TracePreservingQ::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[99955, 3474, 156, 2, 44, "Subsection"],
Cell[100114, 3478, 3442, 115, 185, "Text",
 CellTags->"HermitianPreservingQ::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[103593, 3598, 122, 2, 44, "Subsection"],
Cell[103718, 3602, 3670, 124, 129, "Text",
 CellTags->"UnitalQ::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[107425, 3731, 152, 2, 44, "Subsection"],
Cell[107580, 3735, 3727, 125, 148, "Text",
 CellTags->"PauliChannelQ::usage"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[111356, 3866, 104, 1, 64, "Section"],
Cell[CellGroupData[{
Cell[111485, 3871, 104, 1, 44, "Subsection"],
Cell[111592, 3874, 2383, 80, 90, "Text",
 CellTags->"ProcessFidelity::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[114012, 3959, 102, 1, 44, "Subsection"],
Cell[114117, 3962, 3032, 107, 90, "Text",
 CellTags->"GateFidelity::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[117186, 4074, 111, 1, 44, "Subsection"],
Cell[117300, 4077, 2362, 76, 109, "Text",
 CellTags->"AverageGateFidelity::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[119699, 4158, 111, 1, 44, "Subsection"],
Cell[119813, 4161, 3278, 110, 130, "Text",
 CellTags->"EntanglementFidelity::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123128, 4276, 104, 1, 44, "Subsection"],
Cell[123235, 4279, 750, 19, 50, "Text",
 CellTags->"ChannelVolume::usage"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[124034, 4304, 101, 1, 64, "Section"],
Cell[CellGroupData[{
Cell[124160, 4309, 108, 1, 44, "Subsection"],
Cell[124271, 4312, 2551, 93, 71, "Text",
 CellTags->"ComChannel::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[126859, 4410, 111, 1, 44, "Subsection"],
Cell[126973, 4413, 2554, 94, 71, "Text",
 CellTags->"AComChannel::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[129564, 4512, 116, 1, 44, "Subsection"],
Cell[129683, 4515, 5405, 196, 149, "Text",
 CellTags->"LindbladDissipator::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[135125, 4716, 113, 1, 44, "Subsection"],
Cell[135241, 4719, 3702, 128, 169, "Text",
 CellTags->"Lindblad::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[138980, 4852, 100, 1, 44, "Subsection"],
Cell[139083, 4855, 3355, 108, 207, "Text",
 CellTags->"SwapChannel::usage"]
}, Open  ]],
Cell[CellGroupData[{
Cell[142475, 4968, 109, 1, 44, "Subsection"],
Cell[142587, 4971, 3155, 111, 111, "Text",
 CellTags->"PartialTrChannel::usage"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
